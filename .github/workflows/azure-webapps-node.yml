# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy Node.js app to Azure Web App - darksied

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: darksied  # Your Azure Web App name
  AZURE_WEBAPP_PACKAGE_PATH: './dist'  # Ensure your build files are in /dist
  NODE_VERSION: '18.x'  # Use Node 18.x as per your setup

permissions:
  contents: read
  id-token: write  # Needed for proper deployment permissions

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Node modules  # ✅ Speeds up build times
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Cache node_modules  # ✅ Optional but speeds up builds
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-modules-

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies and build
      run: |
        npm ci  # ✅ Faster and more reliable for CI/CD than 'npm install'
        npm run build --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: ./dist  # ✅ Ensure the build files are uploaded correctly

  deploy:
    permissions:
      contents: read
      id-token: write  # ✅ Required for Azure login
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: 'Login to Azure'
      uses: azure/login@v1  # ✅ Logs into Azure
      with:
        creds: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}  # ✅ Ensure secret is set in GitHub

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ./dist  # ✅ Fixed package path to ensure deployment

    - name: 'Clear Azure Cache (Optional but Recommended)'
      run: |
        az webapp config appsettings set --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group <Your-Resource-Group> --settings WEBSITES_CONTAINER_START_TIME_LIMIT=1800

    - name: 'Post Deployment Check'
      run: echo "✅ Deployment to ${{ env.AZURE_WEBAPP_NAME }} completed successfully!"

    - name: 'Azure Restart App Service (Optional but Recommended)'
      run: |
        az webapp restart --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group <Your-Resource-Group>
